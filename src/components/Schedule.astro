---
import { getCollection, getEntry } from "astro:content";
import { marked } from "marked";
marked.use({ mangle: false, headerIds: false });
import { localizeTime, formatTime } from "../utils";

const exams = (await getCollection("exams")).map((entry) => {
  return {
    type: "exam",
    title: entry.data.title,
    date: localizeTime(entry.data.date),
    content: entry.data.content,
    notes: entry.data.notes,
  };
});
const homeworks = (
  await getCollection("docs", (entry) => entry.id.startsWith("homework"))
).flatMap((entry) => {
  return [
    {
      slug: entry.slug,
      type: "homework release",
      title: entry.data.title,
      date: localizeTime(entry.data.release),
    },
    {
      slug: entry.slug,
      type: "homework due",
      title: entry.data.title,
      date: localizeTime(entry.data.due),
    },
  ];
});
const lectures = (
  await getCollection("docs", (entry) => entry.id.startsWith("lecture"))
).map((entry) => {
  return {
    slug: entry.slug,
    type: "lecture",
    title: entry.data.title,
    date: localizeTime(entry.data.date),
    readings: entry.data.readings,
    notes: entry.data.notes,
  };
});
// merge the three above arrays and sort them by date
const events = [...exams, ...homeworks, ...lectures].sort(
  (a, b) => +a.date! - +b.date!,
);
---

<button id="jumpToDateButton"> Jump to Nearest Date</button>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Date</th>
      <th>Topic</th>
      <th>Content</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    {
      events.map((event) => (
        <tr data-date={event.date}>
          <td>{event.type}</td>
          <td>{formatTime(event.date)}</td>
          <td>
            {event.type === "homework release" ||
            event.type === "homework due" ? (
              // @ts-expect-error
              <a href={`/${event.slug}/`}>{event.title}</a>
            ) : (
              event.title
            )}
          </td>
          <td>
            {event.type === "exam" && event.content}
            {event.readings && (
              <ul>
                {event.readings.map((reading) => (
                  <li>
                    <a href={reading.link} target="_blank">
                      {reading.name}
                    </a>
                    {reading.grad_only && <span title="grad only">🧑‍🎓</span>}
                    {reading.optional && <span title="not on quiz">📵</span>}
                  </li>
                ))}
              </ul>
            )}
          </td>
          <td>{event.notes && <Fragment set:html={marked(event.notes)} />}</td>
        </tr>
      ))
    }
  </tbody>
</table>

<style>
  ul {
    padding-left: 0.5rem;
  }
</style>

<script is:inline>
// is:inline to prevent Astro from processing
const today = new Date();

const jumpToDate = () => {
  const rows = document.querySelectorAll("tr[data-date]");
  const nearestRow = Array.from(rows).sort((a, b) => {
    return (
      Math.abs(today - new Date(a.getAttribute("data-date"))) -
      Math.abs(today - new Date(b.getAttribute("data-date"))) // Sort by diff between today's date and event's date
    );
  })[0]; // Return first item (nearest date)

  nearestRow.scrollIntoView(); // Scroll window to the row
  nearestRow.style.backgroundColor = "#ffff0040"; // Highlight the row
};

// Add event listener
document.querySelector("#jumpToDateButton").addEventListener("click", () => {
  jumpToDate();
});
</script>
