---
import { getCollection, getEntry } from "astro:content";
import { marked } from "marked";
// marked.use({ mangle: false, headerIds: false });
import { localizeTime, formatTime } from "../utils";

const exams = (await getCollection("exams")).map((entry) => {
  return {
    type: "exam",
    title: entry.data.title,
    date: localizeTime(entry.data.date),
    content: entry.data.content,
    notes: entry.data.notes,
  };
});
const homeworks = (
  await getCollection("docs", (entry) => entry.id.startsWith("homework"))
).flatMap((entry) => {
  return [
    {
      slug: entry.slug,
      type: "homework release",
      title: entry.data.title,
      date: localizeTime(entry.data.release),
    },
    {
      slug: entry.slug,
      type: "homework due",
      title: entry.data.title,
      date: localizeTime(entry.data.due),
    },
  ];
});
const lectures = (
  await getCollection("docs", (entry) => entry.id.startsWith("lecture"))
).map((entry) => {
  return {
    slug: entry.slug,
    type: "lecture",
    title: entry.data.title,
    date: localizeTime(entry.data.date),
    readings: entry.data.readings,
    notes: entry.data.notes,
  };
});
// merge the three above arrays and sort them by date
const events = [...exams, ...homeworks, ...lectures].sort(
  (a, b) => +a.date! - +b.date!
);
---

<span class="action primary" id="jumpToDateButton">Jump to Nearest Date</span>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Date</th>
      <th>Topic</th>
      <th>Content</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    {
      events.map((event) => (
        <tr data-date={event.date}>
          <td>{event.type}</td>
          <td>{formatTime(event.date)}</td>
          <td>
            {event.type === "homework release" ||
            event.type === "homework due" ? (
              // @ts-expect-error
              <a href={`/${event.slug}/`}>{event.title}</a>
            ) : (
              event.title
            )}
          </td>
          <td>
            {event.type === "exam" && event.content}
            {event.readings && (
              <ul>
                {event.readings.map((reading) => (
                  <li>
                    <a href={reading.link} target="_blank">
                      {reading.name}
                    </a>
                    {reading.grad_only && <span title="grad only">üßë‚Äçüéì</span>}
                    {reading.optional && <span title="not on quiz">üìµ</span>}
                  </li>
                ))}
              </ul>
            )}
          </td>
          <td>{event.notes && <Fragment set:html={marked(event.notes)} />}</td>
        </tr>
      ))
    }
  </tbody>
</table>

<style>
  .action {
    display: inline-block;
    cursor: pointer;
    margin-top: 1rem;
    margin-bottom: 1rem;
    gap: 0.5em;
    align-items: center;
    border-radius: 999rem;
    padding: 0.5rem 1.125rem;
    color: var(--sl-color-white);
    line-height: 1.1875;
    text-decoration: none;
    font-size: var(--sl-text-sm);
  }
  .action.primary {
    background: var(--sl-color-text-accent);
    color: var(--sl-color-black);
  }
  ul {
    padding-left: 0.5rem;
  }
  @keyframes fadeHighlight {
    from {
      background-color: #ffff00a9;
    }
    to {
      background-color: inherit;
    }
  }

  .highlight {
    animation: fadeHighlight 2s ease-out forwards;
  }
</style>

<script is:inline>
  // is:inline to prevent Astro from processing
  const today = new Date();

  const jumpToDate = () => {
    const rows = document.querySelectorAll("tr[data-date]");
    const nearestRow = Array.from(rows).sort((a, b) => {
      return (
        Math.abs(today - new Date(a.getAttribute("data-date"))) -
        Math.abs(today - new Date(b.getAttribute("data-date"))) // Sort by diff between today's date and event's date
      );
    })[0]; // Return first item (nearest date)
    const originalColor = window.getComputedStyle(nearestRow).backgroundColor;
    nearestRow.style.backgroundColor = originalColor; // Set original color inline
    nearestRow.classList.add("highlight");

    setTimeout(() => {
      nearestRow.classList.remove("highlight");
      nearestRow.style.backgroundColor = ""; // Revert to stylesheet color
    }, 2000);

    nearestRow.scrollIntoView();
  };

  document.querySelector("#jumpToDateButton").addEventListener("click", () => {
    jumpToDate();
  });
</script>
